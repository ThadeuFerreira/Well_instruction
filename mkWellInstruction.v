//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Fri Dec  2 17:21:53 BRST 2016
//
//
// Ports:
// Name                         I/O  size props
// get                            O    32
// RDY_get                        O     1 const
// CLK                            I     1 clock
// RST_N                          I     1 reset
// get_s                          I    32
// EN_get                         I     1
//
// Combinational paths from inputs to outputs:
//   get_s -> get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkWellInstruction(CLK,
			 RST_N,

			 get_s,
			 EN_get,
			 get,
			 RDY_get);
  input  CLK;
  input  RST_N;

  // actionvalue method get
  input  [31 : 0] get_s;
  input  EN_get;
  output [31 : 0] get;
  output RDY_get;

  // signals for module outputs
  wire [31 : 0] get;
  wire RDY_get;

  // ports of submodule rng
  wire [31 : 0] rng$get, rng$initialize_s;
  wire rng$EN_get, rng$EN_initialize;

  // rule scheduling signals
  wire CAN_FIRE_get, WILL_FIRE_get;

  // actionvalue method get
  assign get = (get_s == 32'd0) ? rng$get : 32'd0 ;
  assign RDY_get = 1'd1 ;
  assign CAN_FIRE_get = 1'd1 ;
  assign WILL_FIRE_get = EN_get ;

  // submodule rng
  mkWellPRNG rng(.CLK(CLK),
		 .RST_N(RST_N),
		 .initialize_s(rng$initialize_s),
		 .EN_initialize(rng$EN_initialize),
		 .EN_get(rng$EN_get),
		 .RDY_initialize(),
		 .get(rng$get),
		 .RDY_get());

  // submodule rng
  assign rng$initialize_s = get_s ;
  assign rng$EN_initialize = EN_get && get_s != 32'd0 ;
  assign rng$EN_get = EN_get && get_s == 32'd0 ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (EN_get && get_s == 32'd0) $display("Get");
    if (EN_get && get_s != 32'd0) $display("Initialize");
  end
  // synopsys translate_on
endmodule  // mkWellInstruction

